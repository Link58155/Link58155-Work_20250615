/* QUESTIONS 
/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */

SELECT name FROM `Facilities` WHERE membercost > 0.0;



/* Q2: How many facilities do not charge a fee to members? */

SELECT name FROM `Facilities` WHERE membercost = 0.0;

A2: 4


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */


SELECT facid, name, membercost, monthlymaintenance FROM `Facilities` WHERE membercost > 0.0 AND membercost < 0.2 * monthlymaintenance;



/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */


SELECT * FROM `Facilities` WHERE facid IN (1,5);


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT name, monthlymaintenance, 
CASE WHEN monthlymaintenance > 100 THEN 'expensive' 
	 ELSE 'cheap' END AS 'expense_label' 
FROM `Facilities`;




/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */


SELECT
    surname,
    firstname,
    joindate
FROM
    Members
WHERE
    joindate = (SELECT MAX(joindate) FROM Members);


/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */


SELECT DISTINCT CONCAT(firstname, ' ', surname) AS full_name, f.name
FROM Members as m
INNER JOIN Bookings as b
USING(memid)
INNER JOIN Facilities as f
USING(facid)
WHERE f.name LIKE 'Tennis%'
ORDER BY full_name ASC;



/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT DISTINCT CONCAT(firstname, ' ', surname) AS full_name, f.name,
CASE 
	WHEN m.memid = 0 THEN f.guestcost * b.slots
    ELSE f.membercost * b.slots 
    END AS cost
FROM Members as m
INNER JOIN Bookings as b
USING(memid)
INNER JOIN Facilities as f
USING(facid)
WHERE b.starttime LIKE '2012-09-14%'
AND (CASE WHEN m.memid = 0 THEN f.guestcost * b.slots ELSE f.membercost * b.slots END) > 30;

/* Q9: This time, produce the same result as in Q8, but using a subquery. */
SELECT full_name, facility_name, cost
FROM (SELECT DISTINCT CONCAT(firstname, ' ', surname) AS full_name, f.name AS facility_name,
CASE 
	WHEN m.memid = 0 THEN f.guestcost * b.slots
    ELSE f.membercost * b.slots 
    END AS cost
FROM Members as m
INNER JOIN Bookings as b
USING(memid)
INNER JOIN Facilities as f
USING(facid)
WHERE b.starttime LIKE '2012-09-14%')AS subquery

WHERE cost > 30
ORDER BY cost DESC;



/* PART 2: SQLite
/* We now want you to jump over to a local instance of the database on your machine. 

Copy and paste the LocalSQLConnection.py script into an empty Jupyter notebook, and run it. 

Make sure that the SQLFiles folder containing thes files is in your working directory, and
that you haven't changed the name of the .db file from 'sqlite\db\pythonsqlite'.

You should see the output from the initial query 'SELECT * FROM FACILITIES'.

Complete the remaining tasks in the Jupyter interface. If you struggle, feel free to go back
to the PHPMyAdmin interface as and when you need to. 

You'll need to paste your query into value of the 'query1' variable and run the code block again to get an output.
 
QUESTIONS:
/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */

With subquery AS (SELECT DISTINCT f.name AS facility_name, 
CASE 
	WHEN m.memid = 0 THEN f.guestcost * b.slots
    ELSE f.membercost * b.slots 
    END AS total_revenue
FROM Members as m
INNER JOIN Bookings as b
USING(memid)
INNER JOIN Facilities as f
USING(facid))

SELECT facility_name, SUM(total_revenue) AS total_facility_revenue
FROM subquery
GROUP BY facility_name
HAVING SUM(total_revenue) < 1000
ORDER BY total_facility_revenue DESC;

/*Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */

SELECT
    CONCAT(m.firstname, ' ', m.surname) AS full_name,
    CONCAT(r.surname, ' ', r.firstname) AS recommender
FROM
    Members AS m
LEFT JOIN
    Members AS r 
ON m.memid = r.recommendedby;


/* Q12: Find the facilities with their usage by member, but not guests */

SELECT CONCAT(m.firstname, ' ', m.surname) AS full_name, f.name
FROM Members as m
INNER JOIN Bookings as b
USING(memid)
INNER JOIN Facilities as f
USING(facid)
WHERE m.memid != 0; 


/* Q13: Find the facilities usage by month, but not guests */;

SELECT EXTRACT(MONTH FROM b.starttime) AS month, f.name
FROM Members as m
INNER JOIN Bookings as b
USING(memid)
INNER JOIN Facilities as f
USING(facid)
WHERE m.memid != 0;